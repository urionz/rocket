{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-local/ufs-local.js"],"names":["module","export","LocalStore","_","link","v","check","Meteor","UploadFS","Store","constructor","options","extend","mode","path","writeMode","TypeError","self","isServer","fs","Npm","require","stat","err","mkdirp","console","error","message","info","chmod","getPath","file","delete","fileId","callback","getFilePath","bindEnvironment","isFile","unlink","getCollection","remove","call","getReadStream","createReadStream","flags","encoding","autoClose","start","end","getWriteStream","createWriteStream","findOne","fields","extension","store","Local"],"mappings":"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","file":"/packages/jalik_ufs-local.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2017 Karl STEIN\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nimport {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\nimport {UploadFS} from 'meteor/jalik:ufs';\n\n\n/**\n * File system store\n * @param options\n * @constructor\n */\nexport class LocalStore extends UploadFS.Store {\n\n    constructor(options) {\n        // Default options\n        options = _.extend({\n            mode: '0744',\n            path: 'ufs/uploads',\n            writeMode: '0744'\n        }, options);\n\n        // Check options\n        if (typeof options.mode !== \"string\") {\n            throw new TypeError(\"LocalStore: mode is not a string\");\n        }\n        if (typeof options.path !== \"string\") {\n            throw new TypeError(\"LocalStore: path is not a string\");\n        }\n        if (typeof options.writeMode !== \"string\") {\n            throw new TypeError(\"LocalStore: writeMode is not a string\");\n        }\n\n        super(options);\n        let self = this;\n\n        // Private attributes\n        let mode = options.mode;\n        let path = options.path;\n        let writeMode = options.writeMode;\n\n        if (Meteor.isServer) {\n            const fs = Npm.require('fs');\n\n            fs.stat(path, function (err) {\n                if (err) {\n                    const mkdirp = Npm.require('mkdirp');\n\n                    // Create the directory\n                    mkdirp(path, {mode: mode}, function (err) {\n                        if (err) {\n                            console.error(`LocalStore: cannot create store at ${path} (${err.message})`);\n                        } else {\n                            console.info(`LocalStore: store created at ${path}`);\n                        }\n                    });\n                } else {\n                    // Set directory permissions\n                    fs.chmod(path, mode, function (err) {\n                        err && console.error(`LocalStore: cannot set store permissions ${mode} (${err.message})`);\n                    });\n                }\n            });\n        }\n\n        /**\n         * Returns the path or sub path\n         * @param file\n         * @return {string}\n         */\n        this.getPath = function (file) {\n            return path + (file ? `/${file}` : '');\n        };\n\n\n        if (Meteor.isServer) {\n            /**\n             * Removes the file\n             * @param fileId\n             * @param callback\n             */\n            this.delete = function (fileId, callback) {\n                let path = this.getFilePath(fileId);\n\n                if (typeof callback !== 'function') {\n                    callback = function (err) {\n                        err && console.error(`LocalStore: cannot delete file \"${fileId}\" at ${path} (${err.message})`);\n                    }\n                }\n                const fs = Npm.require('fs');\n                fs.stat(path, Meteor.bindEnvironment(function (err, stat) {\n                    if (!err && stat && stat.isFile()) {\n                        fs.unlink(path, Meteor.bindEnvironment(function () {\n                            self.getCollection().remove(fileId);\n                            callback.call(self);\n                        }));\n                    }\n                }));\n            };\n\n            /**\n             * Returns the file read stream\n             * @param fileId\n             * @param file\n             * @param options\n             * @return {*}\n             */\n            this.getReadStream = function (fileId, file, options) {\n                const fs = Npm.require('fs');\n                options = _.extend({}, options);\n                return fs.createReadStream(self.getFilePath(fileId, file), {\n                    flags: 'r',\n                    encoding: null,\n                    autoClose: true,\n                    start: options.start,\n                    end: options.end\n                });\n            };\n\n            /**\n             * Returns the file write stream\n             * @param fileId\n             * @param file\n             * @param options\n             * @return {*}\n             */\n            this.getWriteStream = function (fileId, file, options) {\n                const fs = Npm.require('fs');\n                options = _.extend({}, options);\n                return fs.createWriteStream(self.getFilePath(fileId, file), {\n                    flags: 'a',\n                    encoding: null,\n                    mode: writeMode,\n                    start: options.start\n                });\n            };\n        }\n    }\n\n    /**\n     * Returns the file path\n     * @param fileId\n     * @param file\n     * @return {string}\n     */\n    getFilePath(fileId, file) {\n        file = file || this.getCollection().findOne(fileId, {fields: {extension: 1}});\n        return file && this.getPath(fileId + (file.extension ? `.${file.extension }` : ''));\n    }\n}\n\n// Add store to UFS namespace\nUploadFS.store.Local = LocalStore;\n"]}