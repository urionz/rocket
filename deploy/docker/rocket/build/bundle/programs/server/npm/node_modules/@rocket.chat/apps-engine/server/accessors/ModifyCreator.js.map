{"version":3,"sources":["src/server/accessors/ModifyCreator.ts"],"names":[],"mappings":";;;;;;;;;;AAGA,wDAAuE;AACvE,kDAAyD;AACzD,kDAAsD;AAEtD,uDAAoD;AACpD,qEAAkE;AAClE,qDAAkD;AAClD,+CAA4C;AAE5C;IAGI,YAA6B,OAAmB,EAAmB,KAAa;QAAnD,YAAO,GAAP,OAAO,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAQ;QAC5E,IAAI,CAAC,eAAe,GAAG,IAAI,iCAAe,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;IAEM,kBAAkB;QACrB,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAEM,eAAe;QAClB,OAAO,IAAI,oBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAEM,YAAY,CAAC,IAAe;QAC/B,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,+BAAc,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAEM,oBAAoB,CAAC,IAAuB;QAC/C,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,+CAAsB,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAEM,SAAS,CAAC,IAAY;QACzB,IAAI,IAAI,EAAE;YACN,OAAO,IAAI,CAAC,EAAE,CAAC;SAClB;QAED,OAAO,IAAI,yBAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,OAAiE;QAC3E,QAAQ,OAAO,CAAC,IAAI,EAAE;YAClB,KAAK,qCAA0B,CAAC,OAAO;gBACnC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACxC,KAAK,qCAA0B,CAAC,gBAAgB;gBAC5C,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAChD,KAAK,qCAA0B,CAAC,IAAI;gBAChC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACrC;gBACI,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;SACvF;IACL,CAAC;IAEa,cAAc,CAAC,OAAwB;;YACjD,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACpC,OAAO,MAAM,CAAC,EAAE,CAAC;YAEjB,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE;gBACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAE1E,IAAI,CAAC,OAAO,EAAE;oBACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;iBAC9D;gBAED,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;aAC3B;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACtE,CAAC;KAAA;IAEO,sBAAsB,CAAC,OAAgC;QAC3D,IAAI,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE;YAC9C,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;SAC3D;QAED,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;QACpC,OAAO,MAAM,CAAC,EAAE,CAAC;QAEjB,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SAC1D;QAED,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAEpE,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IAEO,WAAW,CAAC,OAAqB;QACrC,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;QACjC,OAAO,MAAM,CAAC,EAAE,CAAC;QAEjB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACzD;QAED,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAQ,CAAC,SAAS,EAAE;YACpC,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE;gBACvC,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;aAC5D;SACJ;QAED,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAQ,CAAC,cAAc,EAAE;YACzC,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAQ,CAAC,SAAS,EAAE;gBACpC,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE;oBACvD,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;iBAClE;aACJ;YAED,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE;gBACnD,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;aAChE;SACJ;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,4BAA4B,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3G,CAAC;CACJ;AAlHD,sCAkHC","file":"ModifyCreator.js","sourcesContent":["import { ILivechatCreator, ILivechatMessageBuilder, IMessageBuilder, IModifyCreator, IRoomBuilder } from '../../definition/accessors';\nimport { ILivechatMessage } from '../../definition/livechat/ILivechatMessage';\nimport { IMessage } from '../../definition/messages';\nimport { RocketChatAssociationModel } from '../../definition/metadata';\nimport { IRoom, RoomType } from '../../definition/rooms';\nimport { BlockBuilder } from '../../definition/uikit';\nimport { AppBridges } from '../bridges';\nimport { LivechatCreator } from './LivechatCreator';\nimport { LivechatMessageBuilder } from './LivechatMessageBuilder';\nimport { MessageBuilder } from './MessageBuilder';\nimport { RoomBuilder } from './RoomBuilder';\n\nexport class ModifyCreator implements IModifyCreator {\n    private livechatCreator: LivechatCreator;\n\n    constructor(private readonly bridges: AppBridges, private readonly appId: string) {\n        this.livechatCreator = new LivechatCreator(bridges, appId);\n    }\n\n    public getLivechatCreator(): ILivechatCreator {\n        return this.livechatCreator;\n    }\n\n    public getBlockBuilder(): BlockBuilder {\n        return new BlockBuilder(this.appId);\n    }\n\n    public startMessage(data?: IMessage): IMessageBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new MessageBuilder(data);\n    }\n\n    public startLivechatMessage(data?: ILivechatMessage): ILivechatMessageBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new LivechatMessageBuilder(data);\n    }\n\n    public startRoom(data?: IRoom): IRoomBuilder {\n        if (data) {\n            delete data.id;\n        }\n\n        return new RoomBuilder(data);\n    }\n\n    public finish(builder: IMessageBuilder | ILivechatMessageBuilder | IRoomBuilder): Promise<string> {\n        switch (builder.kind) {\n            case RocketChatAssociationModel.MESSAGE:\n                return this._finishMessage(builder);\n            case RocketChatAssociationModel.LIVECHAT_MESSAGE:\n                return this._finishLivechatMessage(builder);\n            case RocketChatAssociationModel.ROOM:\n                return this._finishRoom(builder);\n            default:\n                throw new Error('Invalid builder passed to the ModifyCreator.finish function.');\n        }\n    }\n\n    private async _finishMessage(builder: IMessageBuilder): Promise<string> {\n        const result = builder.getMessage();\n        delete result.id;\n\n        if (!result.sender || !result.sender.id) {\n            const appUser = await this.bridges.getUserBridge().getAppUser(this.appId);\n\n            if (!appUser) {\n                throw new Error('Invalid sender assigned to the message.');\n            }\n\n            result.sender = appUser;\n        }\n\n        return this.bridges.getMessageBridge().create(result, this.appId);\n    }\n\n    private _finishLivechatMessage(builder: ILivechatMessageBuilder): Promise<string> {\n        if (builder.getSender() && !builder.getVisitor()) {\n            return this._finishMessage(builder.getMessageBuilder());\n        }\n\n        const result = builder.getMessage();\n        delete result.id;\n\n        if (!result.token && (!result.visitor || !result.visitor.token)) {\n            throw new Error('Invalid visitor sending the message');\n        }\n\n        result.token = result.visitor ? result.visitor.token : result.token;\n\n        return this.bridges.getLivechatBridge().createMessage(result, this.appId);\n    }\n\n    private _finishRoom(builder: IRoomBuilder): Promise<string> {\n        const result = builder.getRoom();\n        delete result.id;\n\n        if (!result.type) {\n            throw new Error('Invalid type assigned to the room.');\n        }\n\n        if (result.type !== RoomType.LIVE_CHAT) {\n            if (!result.creator || !result.creator.id) {\n                throw new Error('Invalid creator assigned to the room.');\n            }\n        }\n\n        if (result.type !== RoomType.DIRECT_MESSAGE) {\n            if (result.type !== RoomType.LIVE_CHAT) {\n                if (!result.slugifiedName || !result.slugifiedName.trim()) {\n                    throw new Error('Invalid slugifiedName assigned to the room.');\n                }\n            }\n\n            if (!result.displayName || !result.displayName.trim()) {\n                throw new Error('Invalid displayName assigned to the room.');\n            }\n        }\n\n        return this.bridges.getRoomBridge().create(result, builder.getMembersToBeAddedUsernames(), this.appId);\n    }\n}\n"]}