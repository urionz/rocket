'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyPassword = exports.hashPassword = exports.bcryptPassword = undefined;

var _bcryptjs = require('bcryptjs');

var _bcryptjs2 = _interopRequireDefault(_bcryptjs);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var bcryptPassword = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(password) {
    var salt, hash;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _bcryptjs2.default.genSalt(10);

          case 2:
            salt = _context.sent;
            _context.next = 5;
            return _bcryptjs2.default.hash(password, salt);

          case 5:
            hash = _context.sent;
            return _context.abrupt('return', hash);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function bcryptPassword(_x) {
    return _ref.apply(this, arguments);
  };
}();

var hashPassword = function hashPassword(password, algorithm) {
  if ((0, _isString2.default)(password)) {
    var hash = _crypto2.default.createHash(algorithm);
    hash.update(password);
    return hash.digest('hex');
  }

  return password.digest;
};

var verifyPassword = function () {
  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(password, hash) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', _bcryptjs2.default.compare(password, hash));

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function verifyPassword(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.bcryptPassword = bcryptPassword;
exports.hashPassword = hashPassword;
exports.verifyPassword = verifyPassword;