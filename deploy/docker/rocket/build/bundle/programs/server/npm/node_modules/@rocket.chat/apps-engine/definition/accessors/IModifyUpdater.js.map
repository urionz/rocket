{"version":3,"sources":["src/definition/accessors/IModifyUpdater.ts"],"names":[],"mappings":"","file":"IModifyUpdater.js","sourcesContent":["import { IUser } from '../users';\nimport { ILivechatUpdater } from './ILivechatUpdater';\nimport { IMessageBuilder } from './IMessageBuilder';\nimport { IRoomBuilder } from './IRoomBuilder';\n\nexport interface IModifyUpdater {\n    /**\n     * Get the updater object responsible for the\n     * Livechat integrations\n     */\n    getLivechatUpdater(): ILivechatUpdater;\n\n    /**\n     * Modifies an existing message.\n     * Raises an exception if a non-existent messageId is supplied\n     *\n     * @param messageId the id of the existing message to modfiy and build\n     * @param updater the user who is updating the message\n     */\n    message(messageId: string, updater: IUser): Promise<IMessageBuilder>;\n\n    /**\n     * Modifies an existing room.\n     * Raises an exception if a non-existent roomId is supplied\n     *\n     * @param roomId the id of the existing room to modify and build\n     * @param updater the user who is updating the room\n     */\n    room(roomId: string, updater: IUser): Promise<IRoomBuilder>;\n\n    /**\n     * Finishes the updating process, saving the object to the database.\n     * Note: If there is an issue or error while updating, this will throw an error.\n     *\n     * @param builder the builder instance\n     */\n    finish(builder: IMessageBuilder | IRoomBuilder): Promise<void>;\n}\n"]}