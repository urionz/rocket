'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _extendableBuiltin(cls) {
  function ExtendableBuiltin() {
    var instance = Reflect.construct(cls, Array.from(arguments));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    return instance;
  }

  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
    constructor: {
      value: cls,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ExtendableBuiltin, cls);
  } else {
    ExtendableBuiltin.__proto__ = cls;
  }

  return ExtendableBuiltin;
}

// eslint-disable-next-line import/prefer-default-export
var AccountsError = exports.AccountsError = function (_extendableBuiltin2) {
  _inherits(AccountsError, _extendableBuiltin2);

  function AccountsError(message, loginInfo, errorCode) {
    _classCallCheck(this, AccountsError);

    var _this = _possibleConstructorReturn(this, (AccountsError.__proto__ || Object.getPrototypeOf(AccountsError)).call(this, message));

    _this.epochTime = Date.now();

    if (loginInfo) {
      _this.loginInfo = loginInfo;
    }

    if (errorCode) {
      _this.errorCode = errorCode;
    }
    return _this;
  }

  _createClass(AccountsError, [{
    key: 'toString',
    value: function toString() {
      try {
        return JSON.stringify({
          message: this.message,
          loginInfo: this.loginInfo,
          errorCode: this.errorCode,
          epochTime: this.epochTime
        });
      } catch (e) {
        return 'Error was thrown but could not be serialized. ' + 'Make sure there is no circular references parameters passed to constructor';
      }
    }
  }, {
    key: 'serialize',
    value: function serialize() {
      return this.toString();
    }
  }]);

  return AccountsError;
}(_extendableBuiltin(Error));