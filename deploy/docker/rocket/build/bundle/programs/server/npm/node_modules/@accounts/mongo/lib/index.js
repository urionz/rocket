(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("babel-runtime/helpers/defineProperty"), require("babel-runtime/regenerator"), require("babel-runtime/helpers/asyncToGenerator"), require("babel-runtime/helpers/extends"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("mongodb"), require("lodash/get"));
	else if(typeof define === 'function' && define.amd)
		define(["babel-runtime/helpers/defineProperty", "babel-runtime/regenerator", "babel-runtime/helpers/asyncToGenerator", "babel-runtime/helpers/extends", "babel-runtime/helpers/classCallCheck", "babel-runtime/helpers/createClass", "mongodb", "lodash/get"], factory);
	else if(typeof exports === 'object')
		exports["@accounts/mongo"] = factory(require("babel-runtime/helpers/defineProperty"), require("babel-runtime/regenerator"), require("babel-runtime/helpers/asyncToGenerator"), require("babel-runtime/helpers/extends"), require("babel-runtime/helpers/classCallCheck"), require("babel-runtime/helpers/createClass"), require("mongodb"), require("lodash/get"));
	else
		root["@accounts/mongo"] = factory(root["babel-runtime/helpers/defineProperty"], root["babel-runtime/regenerator"], root["babel-runtime/helpers/asyncToGenerator"], root["babel-runtime/helpers/extends"], root["babel-runtime/helpers/classCallCheck"], root["babel-runtime/helpers/createClass"], root["mongodb"], root["lodash/get"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _defineProperty2 = __webpack_require__(1);

	var _defineProperty3 = _interopRequireDefault(_defineProperty2);

	var _regenerator = __webpack_require__(2);

	var _regenerator2 = _interopRequireDefault(_regenerator);

	var _asyncToGenerator2 = __webpack_require__(3);

	var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

	var _extends2 = __webpack_require__(4);

	var _extends3 = _interopRequireDefault(_extends2);

	var _classCallCheck2 = __webpack_require__(5);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(6);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _mongodb = __webpack_require__(7);

	var _get = __webpack_require__(8);

	var _get2 = _interopRequireDefault(_get);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var toMongoID = function toMongoID(objectId) {
	  if (typeof objectId === 'string') {
	    return new _mongodb.ObjectID(objectId);
	  }

	  return objectId;
	};

	var Mongo = function () {
	  function Mongo(db, options) {
	    (0, _classCallCheck3.default)(this, Mongo);

	    // eslint-disable-next-line no-unused-expressions
	    this;
	    var defaultOptions = {
	      collectionName: 'users',
	      sessionCollectionName: 'sessions',
	      timestamps: {
	        createdAt: 'createdAt',
	        updatedAt: 'updatedAt'
	      },
	      convertUserIdToMongoObjectId: true,
	      caseSensitiveUserName: true,
	      convertSessionIdToMongoObjectId: true,
	      idProvider: null,
	      dateProvider: function dateProvider(date) {
	        return date ? date.getTime() : Date.now();
	      }
	    };
	    this.options = (0, _extends3.default)({}, defaultOptions, options);
	    if (!db) {
	      throw new Error('A database connection is required');
	    }
	    this.db = db;
	    this.collection = this.db.collection(this.options.collectionName);
	    this.sessionCollection = this.db.collection(this.options.sessionCollectionName);
	  }
	  // TODO definition for mongodb connection object


	  (0, _createClass3.default)(Mongo, [{
	    key: 'setupIndexes',
	    value: function () {
	      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
	        return _regenerator2.default.wrap(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                _context.next = 2;
	                return this.collection.createIndex('username', { unique: 1, sparse: 1 });

	              case 2:
	                _context.next = 4;
	                return this.collection.createIndex('emails.address', { unique: 1, sparse: 1 });

	              case 4:
	              case 'end':
	                return _context.stop();
	            }
	          }
	        }, _callee, this);
	      }));

	      function setupIndexes() {
	        return _ref.apply(this, arguments);
	      }

	      return setupIndexes;
	    }()
	  }, {
	    key: 'createUser',
	    value: function () {
	      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(options) {
	        var _user;

	        var user, ret;
	        return _regenerator2.default.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                user = (_user = {
	                  services: {},
	                  profile: {}
	                }, (0, _defineProperty3.default)(_user, this.options.timestamps.createdAt, Date.now()), (0, _defineProperty3.default)(_user, this.options.timestamps.updatedAt, Date.now()), _user);

	                if (options.password) {
	                  user.services.password = { bcrypt: options.password };
	                }
	                if (options.username) {
	                  user.username = options.username;
	                }
	                if (options.email) {
	                  user.emails = [{ address: options.email.toLowerCase(), verified: false }];
	                }
	                if (options.profile) {
	                  user.profile = options.profile;
	                }
	                if (options.idProvider) {
	                  user = (0, _extends3.default)({}, user, {
	                    _id: options.idProvider()
	                  });
	                }
	                _context2.next = 8;
	                return this.collection.insertOne(user);

	              case 8:
	                ret = _context2.sent;
	                return _context2.abrupt('return', ret.ops[0]._id);

	              case 10:
	              case 'end':
	                return _context2.stop();
	            }
	          }
	        }, _callee2, this);
	      }));

	      function createUser(_x) {
	        return _ref2.apply(this, arguments);
	      }

	      return createUser;
	    }()
	  }, {
	    key: 'findUserById',
	    value: function () {
	      var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(userId) {
	        var _id, user;

	        return _regenerator2.default.wrap(function _callee3$(_context3) {
	          while (1) {
	            switch (_context3.prev = _context3.next) {
	              case 0:
	                _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context3.next = 3;
	                return this.collection.findOne({ _id: _id });

	              case 3:
	                user = _context3.sent;

	                if (user) {
	                  user.id = user._id;
	                }
	                return _context3.abrupt('return', user);

	              case 6:
	              case 'end':
	                return _context3.stop();
	            }
	          }
	        }, _callee3, this);
	      }));

	      function findUserById(_x2) {
	        return _ref3.apply(this, arguments);
	      }

	      return findUserById;
	    }()
	  }, {
	    key: 'findUserByEmail',
	    value: function () {
	      var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(email) {
	        var user;
	        return _regenerator2.default.wrap(function _callee4$(_context4) {
	          while (1) {
	            switch (_context4.prev = _context4.next) {
	              case 0:
	                _context4.next = 2;
	                return this.collection.findOne({ 'emails.address': email.toLowerCase() });

	              case 2:
	                user = _context4.sent;

	                if (user) {
	                  user.id = user._id;
	                }
	                return _context4.abrupt('return', user);

	              case 5:
	              case 'end':
	                return _context4.stop();
	            }
	          }
	        }, _callee4, this);
	      }));

	      function findUserByEmail(_x3) {
	        return _ref4.apply(this, arguments);
	      }

	      return findUserByEmail;
	    }()
	  }, {
	    key: 'findUserByUsername',
	    value: function () {
	      var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(username) {
	        var filter, user;
	        return _regenerator2.default.wrap(function _callee5$(_context5) {
	          while (1) {
	            switch (_context5.prev = _context5.next) {
	              case 0:
	                filter = this.options.caseSensitiveUserName ? { username: username } : { $where: 'obj.username && (obj.username.toLowerCase() === "' + username.toLowerCase() + '")' };
	                _context5.next = 3;
	                return this.collection.findOne(filter);

	              case 3:
	                user = _context5.sent;

	                if (user) {
	                  user.id = user._id;
	                }
	                return _context5.abrupt('return', user);

	              case 6:
	              case 'end':
	                return _context5.stop();
	            }
	          }
	        }, _callee5, this);
	      }));

	      function findUserByUsername(_x4) {
	        return _ref5.apply(this, arguments);
	      }

	      return findUserByUsername;
	    }()
	  }, {
	    key: 'findUserByEmailVerificationToken',
	    value: function () {
	      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(token) {
	        var user;
	        return _regenerator2.default.wrap(function _callee6$(_context6) {
	          while (1) {
	            switch (_context6.prev = _context6.next) {
	              case 0:
	                _context6.next = 2;
	                return this.collection.findOne({ 'services.email.verificationTokens.token': token });

	              case 2:
	                user = _context6.sent;

	                if (user) {
	                  user.id = user._id;
	                }
	                return _context6.abrupt('return', user);

	              case 5:
	              case 'end':
	                return _context6.stop();
	            }
	          }
	        }, _callee6, this);
	      }));

	      function findUserByEmailVerificationToken(_x5) {
	        return _ref6.apply(this, arguments);
	      }

	      return findUserByEmailVerificationToken;
	    }()
	  }, {
	    key: 'findUserByResetPasswordToken',
	    value: function () {
	      var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(token) {
	        var user;
	        return _regenerator2.default.wrap(function _callee7$(_context7) {
	          while (1) {
	            switch (_context7.prev = _context7.next) {
	              case 0:
	                _context7.next = 2;
	                return this.collection.findOne({ 'services.password.reset.token': token });

	              case 2:
	                user = _context7.sent;

	                if (user) {
	                  user.id = user._id;
	                }
	                return _context7.abrupt('return', user);

	              case 5:
	              case 'end':
	                return _context7.stop();
	            }
	          }
	        }, _callee7, this);
	      }));

	      function findUserByResetPasswordToken(_x6) {
	        return _ref7.apply(this, arguments);
	      }

	      return findUserByResetPasswordToken;
	    }()
	  }, {
	    key: 'findPasswordHash',
	    value: function () {
	      var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(userId) {
	        var id, user;
	        return _regenerator2.default.wrap(function _callee8$(_context8) {
	          while (1) {
	            switch (_context8.prev = _context8.next) {
	              case 0:
	                id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context8.next = 3;
	                return this.findUserById(id);

	              case 3:
	                user = _context8.sent;

	                if (!user) {
	                  _context8.next = 6;
	                  break;
	                }

	                return _context8.abrupt('return', (0, _get2.default)(user, 'services.password.bcrypt'));

	              case 6:
	                return _context8.abrupt('return', null);

	              case 7:
	              case 'end':
	                return _context8.stop();
	            }
	          }
	        }, _callee8, this);
	      }));

	      function findPasswordHash(_x7) {
	        return _ref8.apply(this, arguments);
	      }

	      return findPasswordHash;
	    }()
	  }, {
	    key: 'addEmail',
	    value: function () {
	      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(userId, newEmail, verified) {
	        var _id, ret;

	        return _regenerator2.default.wrap(function _callee9$(_context9) {
	          while (1) {
	            switch (_context9.prev = _context9.next) {
	              case 0:
	                _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context9.next = 3;
	                return this.collection.update({ _id: _id }, {
	                  $addToSet: {
	                    emails: {
	                      address: newEmail.toLowerCase(),
	                      verified: verified
	                    }
	                  },
	                  $set: (0, _defineProperty3.default)({}, this.options.timestamps.updatedAt, Date.now())
	                });

	              case 3:
	                ret = _context9.sent;

	                if (!(ret.result.nModified === 0)) {
	                  _context9.next = 6;
	                  break;
	                }

	                throw new Error('User not found');

	              case 6:
	              case 'end':
	                return _context9.stop();
	            }
	          }
	        }, _callee9, this);
	      }));

	      function addEmail(_x8, _x9, _x10) {
	        return _ref9.apply(this, arguments);
	      }

	      return addEmail;
	    }()
	  }, {
	    key: 'removeEmail',
	    value: function () {
	      var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(userId, email) {
	        var _id, ret;

	        return _regenerator2.default.wrap(function _callee10$(_context10) {
	          while (1) {
	            switch (_context10.prev = _context10.next) {
	              case 0:
	                _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context10.next = 3;
	                return this.collection.update({ _id: _id }, {
	                  $pull: { emails: { address: email.toLowerCase() } },
	                  $set: (0, _defineProperty3.default)({}, this.options.timestamps.updatedAt, Date.now())
	                });

	              case 3:
	                ret = _context10.sent;

	                if (!(ret.result.nModified === 0)) {
	                  _context10.next = 6;
	                  break;
	                }

	                throw new Error('User not found');

	              case 6:
	              case 'end':
	                return _context10.stop();
	            }
	          }
	        }, _callee10, this);
	      }));

	      function removeEmail(_x11, _x12) {
	        return _ref10.apply(this, arguments);
	      }

	      return removeEmail;
	    }()
	  }, {
	    key: 'setUsername',
	    value: function () {
	      var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(userId, newUsername) {
	        var _id, ret;

	        return _regenerator2.default.wrap(function _callee11$(_context11) {
	          while (1) {
	            switch (_context11.prev = _context11.next) {
	              case 0:
	                _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context11.next = 3;
	                return this.collection.update({ _id: _id }, {
	                  $set: (0, _defineProperty3.default)({
	                    username: newUsername
	                  }, this.options.timestamps.updatedAt, Date.now())
	                });

	              case 3:
	                ret = _context11.sent;

	                if (!(ret.result.nModified === 0)) {
	                  _context11.next = 6;
	                  break;
	                }

	                throw new Error('User not found');

	              case 6:
	              case 'end':
	                return _context11.stop();
	            }
	          }
	        }, _callee11, this);
	      }));

	      function setUsername(_x13, _x14) {
	        return _ref11.apply(this, arguments);
	      }

	      return setUsername;
	    }()
	  }, {
	    key: 'setPasssword',
	    value: function () {
	      var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(userId, newPassword) {
	        var _id, ret;

	        return _regenerator2.default.wrap(function _callee12$(_context12) {
	          while (1) {
	            switch (_context12.prev = _context12.next) {
	              case 0:
	                _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context12.next = 3;
	                return this.collection.update({ _id: _id }, {
	                  $set: (0, _defineProperty3.default)({
	                    'services.password.bcrypt': newPassword
	                  }, this.options.timestamps.updatedAt, Date.now()),
	                  $unset: {
	                    'services.password.reset': ''
	                  }
	                });

	              case 3:
	                ret = _context12.sent;

	                if (!(ret.result.nModified === 0)) {
	                  _context12.next = 6;
	                  break;
	                }

	                throw new Error('User not found');

	              case 6:
	              case 'end':
	                return _context12.stop();
	            }
	          }
	        }, _callee12, this);
	      }));

	      function setPasssword(_x15, _x16) {
	        return _ref12.apply(this, arguments);
	      }

	      return setPasssword;
	    }()
	  }, {
	    key: 'setProfile',
	    value: function () {
	      var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(userId, profile) {
	        var _id;

	        return _regenerator2.default.wrap(function _callee13$(_context13) {
	          while (1) {
	            switch (_context13.prev = _context13.next) {
	              case 0:
	                _id = this.options.convertUserIdToMongoObjectId ? toMongoID(userId) : userId;
	                _context13.next = 3;
	                return this.collection.update({ _id: _id }, {
	                  $set: (0, _defineProperty3.default)({
	                    profile: profile
	                  }, this.options.timestamps.updatedAt, Date.now())
	                });

	              case 3:
	                return _context13.abrupt('return', profile);

	              case 4:
	              case 'end':
	                return _context13.stop();
	            }
	          }
	        }, _callee13, this);
	      }));

	      function setProfile(_x17, _x18) {
	        return _ref13.apply(this, arguments);
	      }

	      return setProfile;
	    }()
	  }, {
	    key: 'createSession',
	    value: function () {
	      var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(userId, ip, userAgent, extraData) {
	        var _session;

	        var session, ret;
	        return _regenerator2.default.wrap(function _callee14$(_context14) {
	          while (1) {
	            switch (_context14.prev = _context14.next) {
	              case 0:
	                session = (_session = {
	                  userId: userId,
	                  userAgent: userAgent,
	                  ip: ip,
	                  extraData: extraData,
	                  valid: true
	                }, (0, _defineProperty3.default)(_session, this.options.timestamps.createdAt, this.options.dateProvider()), (0, _defineProperty3.default)(_session, this.options.timestamps.updatedAt, this.options.dateProvider()), _session);

	                if (this.options.idProvider) {
	                  session = (0, _extends3.default)({}, session, {
	                    _id: this.options.idProvider()
	                  });
	                }
	                _context14.next = 4;
	                return this.sessionCollection.insertOne(session);

	              case 4:
	                ret = _context14.sent;
	                return _context14.abrupt('return', ret.ops[0]._id);

	              case 6:
	              case 'end':
	                return _context14.stop();
	            }
	          }
	        }, _callee14, this);
	      }));

	      function createSession(_x19, _x20, _x21, _x22) {
	        return _ref14.apply(this, arguments);
	      }

	      return createSession;
	    }()
	  }, {
	    key: 'updateSession',
	    value: function () {
	      var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(sessionId, ip, userAgent) {
	        var _id;

	        return _regenerator2.default.wrap(function _callee15$(_context15) {
	          while (1) {
	            switch (_context15.prev = _context15.next) {
	              case 0:
	                _id = this.options.convertSessionIdToMongoObjectId ? toMongoID(sessionId) : sessionId;
	                _context15.next = 3;
	                return this.sessionCollection.update({ _id: _id }, {
	                  $set: (0, _defineProperty3.default)({
	                    ip: ip,
	                    userAgent: userAgent
	                  }, this.options.timestamps.updatedAt, this.options.dateProvider())
	                });

	              case 3:
	              case 'end':
	                return _context15.stop();
	            }
	          }
	        }, _callee15, this);
	      }));

	      function updateSession(_x23, _x24, _x25) {
	        return _ref15.apply(this, arguments);
	      }

	      return updateSession;
	    }()
	  }, {
	    key: 'invalidateSession',
	    value: function () {
	      var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(sessionId) {
	        var id;
	        return _regenerator2.default.wrap(function _callee16$(_context16) {
	          while (1) {
	            switch (_context16.prev = _context16.next) {
	              case 0:
	                id = this.options.convertSessionIdToMongoObjectId ? toMongoID(sessionId) : sessionId;
	                _context16.next = 3;
	                return this.sessionCollection.update({ _id: id }, {
	                  $set: (0, _defineProperty3.default)({
	                    valid: false
	                  }, this.options.timestamps.updatedAt, this.options.dateProvider())
	                });

	              case 3:
	              case 'end':
	                return _context16.stop();
	            }
	          }
	        }, _callee16, this);
	      }));

	      function invalidateSession(_x26) {
	        return _ref16.apply(this, arguments);
	      }

	      return invalidateSession;
	    }()
	  }, {
	    key: 'invalidateAllSessions',
	    value: function () {
	      var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(userId) {
	        return _regenerator2.default.wrap(function _callee17$(_context17) {
	          while (1) {
	            switch (_context17.prev = _context17.next) {
	              case 0:
	                _context17.next = 2;
	                return this.sessionCollection.updateMany({ userId: userId }, {
	                  $set: (0, _defineProperty3.default)({
	                    valid: false
	                  }, this.options.timestamps.updatedAt, this.options.dateProvider())
	                });

	              case 2:
	              case 'end':
	                return _context17.stop();
	            }
	          }
	        }, _callee17, this);
	      }));

	      function invalidateAllSessions(_x27) {
	        return _ref17.apply(this, arguments);
	      }

	      return invalidateAllSessions;
	    }()
	  }, {
	    key: 'findSessionById',
	    value: function findSessionById(sessionId) {
	      var _id = this.options.convertSessionIdToMongoObjectId ? toMongoID(sessionId) : sessionId;
	      return this.sessionCollection.findOne({ _id: _id });
	    }
	  }, {
	    key: 'addEmailVerificationToken',
	    value: function () {
	      var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(userId, email, token) {
	        return _regenerator2.default.wrap(function _callee18$(_context18) {
	          while (1) {
	            switch (_context18.prev = _context18.next) {
	              case 0:
	                _context18.next = 2;
	                return this.collection.update({ _id: userId }, {
	                  $push: {
	                    'services.email.verificationTokens': {
	                      token: token,
	                      address: email.toLowerCase(),
	                      when: Date.now()
	                    }
	                  }
	                });

	              case 2:
	              case 'end':
	                return _context18.stop();
	            }
	          }
	        }, _callee18, this);
	      }));

	      function addEmailVerificationToken(_x28, _x29, _x30) {
	        return _ref18.apply(this, arguments);
	      }

	      return addEmailVerificationToken;
	    }()
	  }, {
	    key: 'addResetPasswordToken',
	    value: function () {
	      var _ref19 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19(userId, email, token) {
	        var reason = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'reset';
	        return _regenerator2.default.wrap(function _callee19$(_context19) {
	          while (1) {
	            switch (_context19.prev = _context19.next) {
	              case 0:
	                _context19.next = 2;
	                return this.collection.update({ _id: userId }, {
	                  $push: {
	                    'services.password.reset': {
	                      token: token,
	                      address: email.toLowerCase(),
	                      when: Date.now(),
	                      reason: reason
	                    }
	                  }
	                });

	              case 2:
	              case 'end':
	                return _context19.stop();
	            }
	          }
	        }, _callee19, this);
	      }));

	      function addResetPasswordToken(_x31, _x32, _x33) {
	        return _ref19.apply(this, arguments);
	      }

	      return addResetPasswordToken;
	    }()

	    // eslint-disable-next-line max-len

	  }, {
	    key: 'setResetPasssword',
	    value: function () {
	      var _ref20 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee20(userId, email, newPassword) {
	        return _regenerator2.default.wrap(function _callee20$(_context20) {
	          while (1) {
	            switch (_context20.prev = _context20.next) {
	              case 0:
	                _context20.next = 2;
	                return this.setPasssword(userId, newPassword);

	              case 2:
	              case 'end':
	                return _context20.stop();
	            }
	          }
	        }, _callee20, this);
	      }));

	      function setResetPasssword(_x35, _x36, _x37) {
	        return _ref20.apply(this, arguments);
	      }

	      return setResetPasssword;
	    }()
	  }]);
	  return Mongo;
	}();

	exports.default = Mongo;

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/defineProperty");

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/regenerator");

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/asyncToGenerator");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/extends");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/classCallCheck");

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("babel-runtime/helpers/createClass");

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("mongodb");

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("lodash/get");

/***/ }
/******/ ])
});
;