{"version":3,"sources":["src/server/accessors/UploadRead.ts"],"names":[],"mappings":";;;;;;;;;;AAKA;IACI,YAA6B,YAA2B,EAAmB,KAAa;QAA3D,iBAAY,GAAZ,YAAY,CAAe;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAI,CAAC;IAEtF,OAAO,CAAC,EAAU;QACrB,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC;IAEM,SAAS,CAAC,MAAe;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAEY,aAAa,CAAC,EAAU;;YACjC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YAE/D,OAAO,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3D,CAAC;KAAA;CACJ;AAhBD,gCAgBC","file":"UploadRead.js","sourcesContent":["\nimport { IUploadRead } from '../../definition/accessors';\nimport { IUpload } from '../../definition/uploads';\nimport { IUploadBridge } from '../bridges/IUploadBridge';\n\nexport class UploadRead implements IUploadRead {\n    constructor(private readonly uploadBridge: IUploadBridge, private readonly appId: string) { }\n\n    public getById(id: string): Promise<IUpload> {\n        return this.uploadBridge.getById(id, this.appId);\n    }\n\n    public getBuffer(upload: IUpload): Promise<Buffer> {\n        return this.uploadBridge.getBuffer(upload, this.appId);\n    }\n\n    public async getBufferById(id: string): Promise<Buffer> {\n        const upload = await this.uploadBridge.getById(id, this.appId);\n\n        return this.uploadBridge.getBuffer(upload, this.appId);\n    }\n}\n"]}