'use strict';

var _errors = require('./errors');

var error = new _errors.AccountsError('Validation Error', {
  username: 'user'
}, 'ACCOUNTS:1');

var throws = function throws() {
  throw error;
};

describe('AccountsError class', function () {
  it('should be throwable', function () {
    return expect(throws).toThrow();
  });

  it('should carry relevant info', function () {
    try {
      throws();
    } catch (e) {
      expect(e.message).toBe('Validation Error');
      expect(e.loginInfo).toMatchObject({ username: 'user' });
      expect(e.errorCode).toBe('ACCOUNTS:1');
      expect(e.epochTime).toBeDefined();
    }
  });

  it('should be able to serialize into a string', function () {
    try {
      throws();
    } catch (e) {
      expect(e.serialize()).toBe(
      // eslint-disable-next-line prefer-template
      '{"message":"Validation Error",' + '"loginInfo":{"username":"user"},' + '"errorCode":"ACCOUNTS:1",' + '"epochTime":' + e.epochTime + '}');
    }
  });

  it('should be easily distinguished from other errors', function () {
    expect(throws).toThrowError(_errors.AccountsError);
  });
});