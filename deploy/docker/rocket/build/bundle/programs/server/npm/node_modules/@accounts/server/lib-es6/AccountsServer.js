'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountsServer = exports.ServerHooks = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _jsonwebtoken = require('jsonwebtoken');

var _jsonwebtoken2 = _interopRequireDefault(_jsonwebtoken);

var _common = require('@accounts/common');

var _config2 = require('./config');

var _config3 = _interopRequireDefault(_config2);

var _encryption = require('./encryption');

var _tokens = require('./tokens');

var _email = require('./email');

var _email2 = _interopRequireDefault(_email);

var _emailTemplates = require('./emailTemplates');

var _emailTemplates2 = _interopRequireDefault(_emailTemplates);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ServerHooks = exports.ServerHooks = {
  LoginSuccess: 'LoginSuccess',
  LoginError: 'LoginError',
  LogoutSuccess: 'LogoutSuccess',
  LogoutError: 'LogoutError',
  CreateUserSuccess: 'CreateUserSuccess',
  CreateUserError: 'CreateUserError',
  ResumeSessionSuccess: 'ResumeSessionSuccess',
  ResumeSessionError: 'ResumeSessionError',
  RefreshTokensSuccess: 'RefreshTokensSuccess',
  RefreshTokensError: 'RefreshTokensError',
  ImpersonationSuccess: 'ImpersonationSuccess',
  ImpersonationError: 'ImpersonationError'
};

var AccountsServer = exports.AccountsServer = function () {
  function AccountsServer() {
    _classCallCheck(this, AccountsServer);
  }

  _createClass(AccountsServer, [{
    key: 'config',


    /**
     * @description Configure AccountsServer.
     * @param {Object} options - Options for AccountsServer.
     * @param {Object} db - DBInterface for AccountsServer.
     * @returns {Object} - Return the options.
     */
    value: function config(options, db) {
      this._options = _extends({}, _config3.default, options);
      if (!db) {
        throw new _common.AccountsError('A database driver is required');
      }
      this.db = db;
      if (this._options.sendMail) {
        this.email = { sendMail: this._options.sendMail };
      } else {
        this.email = new _email2.default(this._options.email);
      }
      this.emailTemplates = _emailTemplates2.default;

      if (!this.hooks) {
        this.hooks = new _events2.default();
      }
    }

    /**
     * @description Return the AccountsServer options.
     * @returns {AccountsServerConfiguration} - Return the options.
     */

  }, {
    key: 'options',
    value: function options() {
      return this._options;
    }
  }, {
    key: 'onLoginSuccess',
    value: function onLoginSuccess(callback) {
      return this._on(ServerHooks.LoginSuccess, callback);
    }
  }, {
    key: 'onLoginError',
    value: function onLoginError(callback) {
      return this._on(ServerHooks.LoginError, callback);
    }
  }, {
    key: 'onLogoutSuccess',
    value: function onLogoutSuccess(callback) {
      return this._on(ServerHooks.LogoutSuccess, callback);
    }
  }, {
    key: 'onLogoutError',
    value: function onLogoutError(callback) {
      return this._on(ServerHooks.LogoutError, callback);
    }
  }, {
    key: 'onCreateUserSuccess',
    value: function onCreateUserSuccess(callback) {
      return this._on(ServerHooks.CreateUserSuccess, callback);
    }
  }, {
    key: 'onCreateUserError',
    value: function onCreateUserError(callback) {
      return this._on(ServerHooks.CreateUserError, callback);
    }
  }, {
    key: 'onResumeSessionSuccess',
    value: function onResumeSessionSuccess(callback) {
      return this._on(ServerHooks.ResumeSessionSuccess, callback);
    }
  }, {
    key: 'onResumeSessionError',
    value: function onResumeSessionError(callback) {
      return this._on(ServerHooks.ResumeSessionError, callback);
    }
  }, {
    key: 'onRefreshTokensSuccess',
    value: function onRefreshTokensSuccess(callback) {
      return this._on(ServerHooks.RefreshTokensSuccess, callback);
    }
  }, {
    key: 'onRefreshTokensError',
    value: function onRefreshTokensError(callback) {
      return this._on(ServerHooks.RefreshTokensError, callback);
    }
  }, {
    key: 'onImpersonationSuccess',
    value: function onImpersonationSuccess(callback) {
      return this._on(ServerHooks.ImpersonationSuccess, callback);
    }
  }, {
    key: 'onImpersonationError',
    value: function onImpersonationError(callback) {
      return this._on(ServerHooks.ImpersonationError, callback);
    }

    /**
     * @description Login the user with his password.
     * @param {Object} user - User to login.
     * @param {PasswordType} password - Password of user to login.
     * @param {string} ip - User ip.
     * @param {string} userAgent - User user agent.
     * @returns {Promise<Object>} - LoginReturnType.
     */
    // eslint-disable-next-line max-len

  }, {
    key: 'loginWithPassword',
    value: function () {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(user, password, ip, userAgent) {
        var foundUser, loginResult;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;

                if (!(!user || !password)) {
                  _context.next = 3;
                  break;
                }

                throw new _common.AccountsError('Unrecognized options for login request', user, 400);

              case 3:
                if (!(!(0, _lodash.isString)(user) && !(0, _lodash.isPlainObject)(user) || !(0, _lodash.isString)(password))) {
                  _context.next = 5;
                  break;
                }

                throw new _common.AccountsError('Match failed', user, 400);

              case 5:
                foundUser = void 0;

                if (!this._options.passwordAuthenticator) {
                  _context.next = 12;
                  break;
                }

                _context.next = 9;
                return this._externalPasswordAuthenticator(this._options.passwordAuthenticator, user, password);

              case 9:
                foundUser = _context.sent;
                _context.next = 15;
                break;

              case 12:
                _context.next = 14;
                return this._defaultPasswordAuthenticator(user, password);

              case 14:
                foundUser = _context.sent;

              case 15:
                if (foundUser) {
                  _context.next = 17;
                  break;
                }

                throw new _common.AccountsError('User not found', user, 403);

              case 17:
                _context.next = 19;
                return this.loginWithUser(foundUser, ip, userAgent);

              case 19:
                loginResult = _context.sent;


                this.hooks.emit(ServerHooks.LoginSuccess, loginResult);

                return _context.abrupt('return', loginResult);

              case 24:
                _context.prev = 24;
                _context.t0 = _context['catch'](0);

                this.hooks.emit(ServerHooks.LoginError, _context.t0);

                throw _context.t0;

              case 28:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 24]]);
      }));

      function loginWithPassword(_x, _x2, _x3, _x4) {
        return _ref.apply(this, arguments);
      }

      return loginWithPassword;
    }()

    // eslint-disable-next-line max-len

  }, {
    key: '_externalPasswordAuthenticator',
    value: function () {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(authFn, user, password) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt('return', authFn(user, password));

              case 1:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _externalPasswordAuthenticator(_x5, _x6, _x7) {
        return _ref2.apply(this, arguments);
      }

      return _externalPasswordAuthenticator;
    }()
  }, {
    key: '_validateLoginWithField',
    value: function _validateLoginWithField(fieldName, user) {
      var allowedFields = this._options.allowedLoginFields || [];
      var isAllowed = allowedFields.includes(fieldName);

      if (!isAllowed) {
        throw new _common.AccountsError('Login with ' + fieldName + ' is not allowed!', user);
      }
    }

    // eslint-disable-next-line max-len

  }, {
    key: '_defaultPasswordAuthenticator',
    value: function () {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(user, password) {
        var _ref4, username, email, id, foundUser, hash, hashAlgorithm, pass, isPasswordValid;

        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref4 = (0, _lodash.isString)(user) ? (0, _common.toUsernameAndEmail)({ user: user }) : (0, _common.toUsernameAndEmail)(_extends({}, user)), username = _ref4.username, email = _ref4.email, id = _ref4.id;
                foundUser = void 0;

                if (!id) {
                  _context3.next = 9;
                  break;
                }

                this._validateLoginWithField('id', user);
                _context3.next = 6;
                return this.db.findUserById(id);

              case 6:
                foundUser = _context3.sent;
                _context3.next = 21;
                break;

              case 9:
                if (!username) {
                  _context3.next = 16;
                  break;
                }

                this._validateLoginWithField('username', user);
                _context3.next = 13;
                return this.db.findUserByUsername(username);

              case 13:
                foundUser = _context3.sent;
                _context3.next = 21;
                break;

              case 16:
                if (!email) {
                  _context3.next = 21;
                  break;
                }

                this._validateLoginWithField('email', user);
                _context3.next = 20;
                return this.db.findUserByEmail(email);

              case 20:
                foundUser = _context3.sent;

              case 21:
                if (foundUser) {
                  _context3.next = 23;
                  break;
                }

                throw new _common.AccountsError('User not found', user, 403);

              case 23:
                _context3.next = 25;
                return this.db.findPasswordHash(foundUser.id);

              case 25:
                hash = _context3.sent;

                if (hash) {
                  _context3.next = 28;
                  break;
                }

                throw new _common.AccountsError('User has no password set', user, 403);

              case 28:
                hashAlgorithm = this._options.passwordHashAlgorithm;
                pass = hashAlgorithm ? (0, _encryption.hashPassword)(password, hashAlgorithm) : password;
                _context3.next = 32;
                return (0, _encryption.verifyPassword)(pass, hash);

              case 32:
                isPasswordValid = _context3.sent;

                if (isPasswordValid) {
                  _context3.next = 35;
                  break;
                }

                throw new _common.AccountsError('Incorrect password', user, 403);

              case 35:
                return _context3.abrupt('return', foundUser);

              case 36:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _defaultPasswordAuthenticator(_x8, _x9) {
        return _ref3.apply(this, arguments);
      }

      return _defaultPasswordAuthenticator;
    }()

    /**
     * @description Server use only. This method creates a session
     *              without authenticating any user identity.
     *              Any authentication should happen before calling this function.
     * @param {UserObjectType} userId - The user object.
     * @param {string} ip - User's ip.
     * @param {string} userAgent - User's client agent.
     * @returns {Promise<LoginReturnType>} - Session tokens and user object.
     */
    // eslint-disable-next-line max-len

  }, {
    key: 'loginWithUser',
    value: function () {
      var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(user, ip, userAgent) {
        var sessionId, _createTokens, accessToken, refreshToken, loginResult;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.db.createSession(user.id, ip, userAgent);

              case 2:
                sessionId = _context4.sent;
                _createTokens = this.createTokens(sessionId), accessToken = _createTokens.accessToken, refreshToken = _createTokens.refreshToken;
                loginResult = {
                  sessionId: sessionId,
                  user: this._sanitizeUser(user),
                  tokens: {
                    refreshToken: refreshToken,
                    accessToken: accessToken
                  }
                };
                return _context4.abrupt('return', loginResult);

              case 6:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function loginWithUser(_x10, _x11, _x12) {
        return _ref5.apply(this, arguments);
      }

      return loginWithUser;
    }()

    /**
     * @description Create a new user.
     * @param {Object} user - The user object.
     * @returns {Promise<string>} - Return the id of user created.
     */

  }, {
    key: 'createUser',
    value: function () {
      var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(user) {
        var password, _options, validateNewUser, proposedUserObject, userId;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;

                if (!(!_common.validators.validateUsername(user.username) && !_common.validators.validateEmail(user.email))) {
                  _context5.next = 3;
                  break;
                }

                throw new _common.AccountsError('Username or Email is required', {
                  username: user && user.username,
                  email: user && user.email
                });

              case 3:
                _context5.t0 = user.username;

                if (!_context5.t0) {
                  _context5.next = 8;
                  break;
                }

                _context5.next = 7;
                return this.db.findUserByUsername(user.username);

              case 7:
                _context5.t0 = _context5.sent;

              case 8:
                if (!_context5.t0) {
                  _context5.next = 10;
                  break;
                }

                throw new _common.AccountsError('Username already exists', { username: user.username });

              case 10:
                _context5.t1 = user.email;

                if (!_context5.t1) {
                  _context5.next = 15;
                  break;
                }

                _context5.next = 14;
                return this.db.findUserByEmail(user.email);

              case 14:
                _context5.t1 = _context5.sent;

              case 15:
                if (!_context5.t1) {
                  _context5.next = 17;
                  break;
                }

                throw new _common.AccountsError('Email already exists', { email: user.email });

              case 17:
                password = void 0;

                if (!user.password) {
                  _context5.next = 22;
                  break;
                }

                _context5.next = 21;
                return this._hashAndBcryptPassword(user.password);

              case 21:
                password = _context5.sent;

              case 22:
                _options = this.options(), validateNewUser = _options.validateNewUser;
                proposedUserObject = {
                  username: user.username,
                  email: user.email && user.email.toLowerCase(),
                  password: password,
                  profile: user.profile
                };

                if (!(0, _lodash.isFunction)(validateNewUser)) {
                  _context5.next = 27;
                  break;
                }

                _context5.next = 27;
                return validateNewUser(proposedUserObject);

              case 27:
                _context5.next = 29;
                return this.db.createUser(proposedUserObject);

              case 29:
                userId = _context5.sent;

                this.hooks.emit(ServerHooks.CreateUserSuccess, userId, proposedUserObject);

                return _context5.abrupt('return', userId);

              case 34:
                _context5.prev = 34;
                _context5.t2 = _context5['catch'](0);

                this.hooks.emit(ServerHooks.CreateUserError, _context5.t2);

                throw _context5.t2;

              case 38:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[0, 34]]);
      }));

      function createUser(_x13) {
        return _ref6.apply(this, arguments);
      }

      return createUser;
    }()
  }, {
    key: '_on',
    value: function _on(eventName, callback) {
      var _this = this;

      this.hooks.on(eventName, callback);

      return function () {
        return _this.hooks.removeListener(eventName, callback);
      };
    }

    /**
     * @description Impersonate to another user.
     * @param {string} accessToken - User access token.
     * @param {string} username - impersonated user username.
     * @param {string} ip - The user ip.
     * @param {string} userAgent - User user agent.
     * @returns {Promise<Object>} - ImpersonateReturnType
     */
    // eslint-disable-next-line max-len

  }, {
    key: 'impersonate',
    value: function () {
      var _ref7 = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(accessToken, username, ip, userAgent) {
        var session, user, impersonatedUser, isAuthorized, newSessionId, impersonationTokens, impersonationResult;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;

                if ((0, _lodash.isString)(accessToken)) {
                  _context6.next = 3;
                  break;
                }

                throw new _common.AccountsError('An access token is required');

              case 3:
                _context6.prev = 3;

                _jsonwebtoken2.default.verify(accessToken, this._options.tokenSecret);
                _context6.next = 10;
                break;

              case 7:
                _context6.prev = 7;
                _context6.t0 = _context6['catch'](3);
                throw new _common.AccountsError('Access token is not valid');

              case 10:
                _context6.next = 12;
                return this.findSessionByAccessToken(accessToken);

              case 12:
                session = _context6.sent;

                if (session.valid) {
                  _context6.next = 15;
                  break;
                }

                throw new _common.AccountsError('Session is not valid for user');

              case 15:
                _context6.next = 17;
                return this.db.findUserById(session.userId);

              case 17:
                user = _context6.sent;

                if (user) {
                  _context6.next = 20;
                  break;
                }

                throw new _common.AccountsError('User not found');

              case 20:
                _context6.next = 22;
                return this.db.findUserByUsername(username);

              case 22:
                impersonatedUser = _context6.sent;

                if (impersonatedUser) {
                  _context6.next = 25;
                  break;
                }

                throw new _common.AccountsError('User ' + username + ' not found');

              case 25:
                if (this._options.impersonationAuthorize) {
                  _context6.next = 27;
                  break;
                }

                return _context6.abrupt('return', { authorized: false });

              case 27:
                _context6.next = 29;
                return this._options.impersonationAuthorize(user, impersonatedUser);

              case 29:
                isAuthorized = _context6.sent;

                if (isAuthorized) {
                  _context6.next = 32;
                  break;
                }

                return _context6.abrupt('return', { authorized: false });

              case 32:
                _context6.next = 34;
                return this.db.createSession(impersonatedUser.id, ip, userAgent, { impersonatorUserId: user.id });

              case 34:
                newSessionId = _context6.sent;
                impersonationTokens = this.createTokens(newSessionId, true);
                impersonationResult = {
                  authorized: true,
                  tokens: impersonationTokens,
                  user: this._sanitizeUser(impersonatedUser)
                };


                this.hooks.emit(ServerHooks.ImpersonationSuccess, user, impersonationResult);

                return _context6.abrupt('return', impersonationResult);

              case 41:
                _context6.prev = 41;
                _context6.t1 = _context6['catch'](0);

                this.hooks.emit(ServerHooks.ImpersonationError, _context6.t1);

                throw _context6.t1;

              case 45:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this, [[0, 41], [3, 7]]);
      }));

      function impersonate(_x14, _x15, _x16, _x17) {
        return _ref7.apply(this, arguments);
      }

      return impersonate;
    }()

    /**
     * @description Refresh a user token.
     * @param {string} accessToken - User access token.
     * @param {string} refreshToken - User refresh token.
     * @param {string} ip - User ip.
     * @param {string} userAgent - User user agent.
     * @returns {Promise<Object>} - LoginReturnType.
     */
    // eslint-disable-next-line max-len

  }, {
    key: 'refreshTokens',
    value: function () {
      var _ref8 = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(accessToken, refreshToken, ip, userAgent) {
        var sessionId, decodedAccessToken, session, user, tokens, result;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;

                if (!(!(0, _lodash.isString)(accessToken) || !(0, _lodash.isString)(refreshToken))) {
                  _context7.next = 3;
                  break;
                }

                throw new _common.AccountsError('An accessToken and refreshToken are required');

              case 3:
                sessionId = void 0;
                _context7.prev = 4;

                _jsonwebtoken2.default.verify(refreshToken, this._options.tokenSecret);
                decodedAccessToken = _jsonwebtoken2.default.verify(accessToken, this._options.tokenSecret, {
                  ignoreExpiration: true
                });

                sessionId = decodedAccessToken.data.sessionId;
                _context7.next = 13;
                break;

              case 10:
                _context7.prev = 10;
                _context7.t0 = _context7['catch'](4);
                throw new _common.AccountsError('Tokens are not valid');

              case 13:
                _context7.next = 15;
                return this.db.findSessionById(sessionId);

              case 15:
                session = _context7.sent;

                if (session) {
                  _context7.next = 18;
                  break;
                }

                throw new _common.AccountsError('Session not found');

              case 18:
                if (!session.valid) {
                  _context7.next = 32;
                  break;
                }

                _context7.next = 21;
                return this.db.findUserById(session.userId);

              case 21:
                user = _context7.sent;

                if (user) {
                  _context7.next = 24;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: session.userId });

              case 24:
                tokens = this.createTokens(sessionId);
                _context7.next = 27;
                return this.db.updateSession(sessionId, ip, userAgent);

              case 27:
                result = {
                  sessionId: sessionId,
                  user: this._sanitizeUser(user),
                  tokens: tokens
                };


                this.hooks.emit(ServerHooks.RefreshTokensSuccess, result);

                return _context7.abrupt('return', result);

              case 32:
                throw new _common.AccountsError('Session is no longer valid', { id: session.userId });

              case 33:
                _context7.next = 39;
                break;

              case 35:
                _context7.prev = 35;
                _context7.t1 = _context7['catch'](0);

                this.hooks.emit(ServerHooks.RefreshTokensError, _context7.t1);

                throw _context7.t1;

              case 39:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this, [[0, 35], [4, 10]]);
      }));

      function refreshTokens(_x18, _x19, _x20, _x21) {
        return _ref8.apply(this, arguments);
      }

      return refreshTokens;
    }()

    /**
     * @description Refresh a user token.
     * @param {string} sessionId - User session id.
     * @param {boolean} isImpersonated - Should be true if impersonating another user.
     * @returns {Promise<Object>} - Return a new accessToken and refreshToken.
     */

  }, {
    key: 'createTokens',
    value: function createTokens(sessionId) {
      var isImpersonated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _options2 = this._options,
          _options2$tokenSecret = _options2.tokenSecret,
          tokenSecret = _options2$tokenSecret === undefined ? _config3.default.tokenSecret : _options2$tokenSecret,
          _options2$tokenConfig = _options2.tokenConfigs,
          tokenConfigs = _options2$tokenConfig === undefined ? _config3.default.tokenConfigs : _options2$tokenConfig;

      var accessToken = (0, _tokens.generateAccessToken)({
        data: {
          sessionId: sessionId,
          isImpersonated: isImpersonated
        },
        secret: tokenSecret,
        config: tokenConfigs.accessToken || {}
      });
      var refreshToken = (0, _tokens.generateRefreshToken)({
        secret: tokenSecret,
        config: tokenConfigs.refreshToken || {}
      });
      return { accessToken: accessToken, refreshToken: refreshToken };
    }

    /**
     * @description Logout a user and invalidate his session.
     * @param {string} accessToken - User access token.
     * @returns {Promise<void>} - Return a promise.
     */

  }, {
    key: 'logout',
    value: function () {
      var _ref9 = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(accessToken) {
        var session, user;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return this.findSessionByAccessToken(accessToken);

              case 3:
                session = _context8.sent;

                if (!session.valid) {
                  _context8.next = 15;
                  break;
                }

                _context8.next = 7;
                return this.db.findUserById(session.userId);

              case 7:
                user = _context8.sent;

                if (user) {
                  _context8.next = 10;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: session.userId });

              case 10:
                _context8.next = 12;
                return this.db.invalidateSession(session.sessionId);

              case 12:
                this.hooks.emit(ServerHooks.LogoutSuccess, this._sanitizeUser(user), session, accessToken);
                _context8.next = 16;
                break;

              case 15:
                throw new _common.AccountsError('Session is no longer valid', { id: session.userId });

              case 16:
                _context8.next = 22;
                break;

              case 18:
                _context8.prev = 18;
                _context8.t0 = _context8['catch'](0);

                this.hooks.emit(ServerHooks.LogoutError, _context8.t0);

                throw _context8.t0;

              case 22:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this, [[0, 18]]);
      }));

      function logout(_x23) {
        return _ref9.apply(this, arguments);
      }

      return logout;
    }()
  }, {
    key: 'resumeSession',
    value: function () {
      var _ref10 = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(accessToken) {
        var session, user;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                _context9.next = 3;
                return this.findSessionByAccessToken(accessToken);

              case 3:
                session = _context9.sent;

                if (!session.valid) {
                  _context9.next = 21;
                  break;
                }

                _context9.next = 7;
                return this.db.findUserById(session.userId);

              case 7:
                user = _context9.sent;

                if (user) {
                  _context9.next = 10;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: session.userId });

              case 10:
                if (!this._options.resumeSessionValidator) {
                  _context9.next = 19;
                  break;
                }

                _context9.prev = 11;
                _context9.next = 14;
                return this._options.resumeSessionValidator(user, session);

              case 14:
                _context9.next = 19;
                break;

              case 16:
                _context9.prev = 16;
                _context9.t0 = _context9['catch'](11);
                throw new _common.AccountsError(_context9.t0, { id: session.userId }, 403);

              case 19:

                this.hooks.emit(ServerHooks.ResumeSessionSuccess, user, accessToken);

                return _context9.abrupt('return', this._sanitizeUser(user));

              case 21:

                this.hooks.emit(ServerHooks.ResumeSessionError, new _common.AccountsError('Invalid Session', { id: session.userId }));

                return _context9.abrupt('return', null);

              case 25:
                _context9.prev = 25;
                _context9.t1 = _context9['catch'](0);

                this.hooks.emit(ServerHooks.ResumeSessionError, _context9.t1);

                throw _context9.t1;

              case 29:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this, [[0, 25], [11, 16]]);
      }));

      function resumeSession(_x24) {
        return _ref10.apply(this, arguments);
      }

      return resumeSession;
    }()
  }, {
    key: 'findSessionByAccessToken',
    value: function () {
      var _ref11 = _asyncToGenerator(regeneratorRuntime.mark(function _callee10(accessToken) {
        var sessionId, decodedAccessToken, session;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                if ((0, _lodash.isString)(accessToken)) {
                  _context10.next = 2;
                  break;
                }

                throw new _common.AccountsError('An accessToken is required');

              case 2:
                sessionId = void 0;
                _context10.prev = 3;
                decodedAccessToken = _jsonwebtoken2.default.verify(accessToken, this._options.tokenSecret);

                sessionId = decodedAccessToken.data.sessionId;
                _context10.next = 11;
                break;

              case 8:
                _context10.prev = 8;
                _context10.t0 = _context10['catch'](3);
                throw new _common.AccountsError('Tokens are not valid');

              case 11:
                _context10.next = 13;
                return this.db.findSessionById(sessionId);

              case 13:
                session = _context10.sent;

                if (session) {
                  _context10.next = 16;
                  break;
                }

                throw new _common.AccountsError('Session not found');

              case 16:
                return _context10.abrupt('return', session);

              case 17:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this, [[3, 8]]);
      }));

      function findSessionByAccessToken(_x25) {
        return _ref11.apply(this, arguments);
      }

      return findSessionByAccessToken;
    }()

    /**
     * @description Find a user by one of his emails.
     * @param {string} email - User email.
     * @returns {Promise<Object>} - Return a user or null if not found.
     */

  }, {
    key: 'findUserByEmail',
    value: function findUserByEmail(email) {
      return this.db.findUserByEmail(email);
    }

    /**
     * @description Find a user by his username.
     * @param {string} username - User username.
     * @returns {Promise<Object>} - Return a user or null if not found.
     */

  }, {
    key: 'findUserByUsername',
    value: function findUserByUsername(username) {
      return this.db.findUserByUsername(username);
    }

    /**
     * @description Find a user by his id.
     * @param {string} userId - User id.
     * @returns {Promise<Object>} - Return a user or null if not found.
     */

  }, {
    key: 'findUserById',
    value: function findUserById(userId) {
      return this.db.findUserById(userId);
    }

    /**
     * @description Add an email address for a user.
     * Use this instead of directly updating the database.
     * @param {string} userId - User id.
     * @param {string} newEmail - A new email address for the user.
     * @param {boolean} [verified] - Whether the new email address should be marked as verified.
     * Defaults to false.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'addEmail',
    value: function addEmail(userId, newEmail, verified) {
      return this.db.addEmail(userId, newEmail, verified);
    }

    /**
     * @description Remove an email address for a user.
     * Use this instead of directly updating the database.
     * @param {string} userId - User id.
     * @param {string} email - The email address to remove.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'removeEmail',
    value: function removeEmail(userId, email) {
      return this.db.removeEmail(userId, email);
    }

    /**
     * @description Marks the user's email address as verified.
     * @param {string} token - The token retrieved from the verification URL.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'verifyEmail',
    value: function () {
      var _ref12 = _asyncToGenerator(regeneratorRuntime.mark(function _callee11(token) {
        var user, verificationTokens, tokenRecord, emailRecord;
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return this.db.findUserByEmailVerificationToken(token);

              case 2:
                user = _context11.sent;

                if (user) {
                  _context11.next = 5;
                  break;
                }

                throw new _common.AccountsError('Verify email link expired');

              case 5:
                verificationTokens = (0, _lodash.get)(user, ['services', 'email', 'verificationTokens'], []);
                tokenRecord = (0, _lodash.find)(verificationTokens, function (t) {
                  return t.token === token;
                });

                if (tokenRecord) {
                  _context11.next = 9;
                  break;
                }

                throw new _common.AccountsError('Verify email link expired');

              case 9:
                // TODO check time for expiry date
                emailRecord = (0, _lodash.find)(user.emails, function (e) {
                  return e.address === tokenRecord.address;
                });

                if (emailRecord) {
                  _context11.next = 12;
                  break;
                }

                throw new _common.AccountsError('Verify email link is for unknown address');

              case 12:
                _context11.next = 14;
                return this.db.verifyEmail(user.id, emailRecord.address);

              case 14:
              case 'end':
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function verifyEmail(_x26) {
        return _ref12.apply(this, arguments);
      }

      return verifyEmail;
    }()

    /**
     * @description Reset the password for a user using a token received in email.
     * @param {string} token - The token retrieved from the reset password URL.
     * @param {string} newPassword - A new password for the user.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'resetPassword',
    value: function () {
      var _ref13 = _asyncToGenerator(regeneratorRuntime.mark(function _callee12(token, newPassword) {
        var user, resetTokens, resetTokenRecord, emails, password;
        return regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.db.findUserByResetPasswordToken(token);

              case 2:
                user = _context12.sent;

                if (user) {
                  _context12.next = 5;
                  break;
                }

                throw new _common.AccountsError('Reset password link expired');

              case 5:

                // TODO move this getter into a password service module
                resetTokens = (0, _lodash.get)(user, ['services', 'password', 'reset']);
                resetTokenRecord = (0, _lodash.find)(resetTokens, function (t) {
                  return t.token === token;
                });

                if (!this._isTokenExpired(token, resetTokenRecord)) {
                  _context12.next = 9;
                  break;
                }

                throw new _common.AccountsError('Reset password link expired');

              case 9:
                emails = user.emails || [];

                if ((0, _lodash.includes)(emails.map(function (email) {
                  return email.address;
                }), resetTokenRecord.address)) {
                  _context12.next = 12;
                  break;
                }

                throw new _common.AccountsError('Token has invalid email address');

              case 12:
                _context12.next = 14;
                return this._hashAndBcryptPassword(newPassword);

              case 14:
                password = _context12.sent;
                _context12.next = 17;
                return this.db.setResetPasssword(user.id, resetTokenRecord.address, password, token);

              case 17:
                // Changing the password should invalidate existing sessions
                this.db.invalidateAllSessions(user.id);

              case 18:
              case 'end':
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function resetPassword(_x27, _x28) {
        return _ref13.apply(this, arguments);
      }

      return resetPassword;
    }()
  }, {
    key: '_isTokenExpired',
    value: function _isTokenExpired(token, tokenRecord) {
      return !tokenRecord || Number(tokenRecord.when) + this._options.emailTokensExpiry < Date.now();
    }

    /**
     * @description Change the password for a user.
     * @param {string} userId - User id.
     * @param {string} newPassword - A new password for the user.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'setPassword',
    value: function () {
      var _ref14 = _asyncToGenerator(regeneratorRuntime.mark(function _callee13(userId, newPassword) {
        var password;
        return regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return (0, _encryption.bcryptPassword)(newPassword);

              case 2:
                password = _context13.sent;
                return _context13.abrupt('return', this.db.setPasssword(userId, password));

              case 4:
              case 'end':
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function setPassword(_x29, _x30) {
        return _ref14.apply(this, arguments);
      }

      return setPassword;
    }()

    /**
     * @description Change the profile for a user.
     * @param {string} userId - User id.
     * @param {Object} profile - The new user profile.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'setProfile',
    value: function () {
      var _ref15 = _asyncToGenerator(regeneratorRuntime.mark(function _callee14(userId, profile) {
        var user;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.db.findUserById(userId);

              case 2:
                user = _context14.sent;

                if (user) {
                  _context14.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: userId });

              case 5:
                _context14.next = 7;
                return this.db.setProfile(userId, profile);

              case 7:
              case 'end':
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function setProfile(_x31, _x32) {
        return _ref15.apply(this, arguments);
      }

      return setProfile;
    }()

    /**
     * @description Update the profile for a user,
     * the new profile will be added to the existing one.
     * @param {string} userId - User id.
     * @param {Object} profile - User profile to add.
     * @returns {Promise<Object>} - Return a Promise.
     */

  }, {
    key: 'updateProfile',
    value: function () {
      var _ref16 = _asyncToGenerator(regeneratorRuntime.mark(function _callee15(userId, profile) {
        var user;
        return regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.db.findUserById(userId);

              case 2:
                user = _context15.sent;

                if (user) {
                  _context15.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { id: userId });

              case 5:
                return _context15.abrupt('return', this.db.setProfile(userId, _extends({}, user.profile, profile)));

              case 6:
              case 'end':
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function updateProfile(_x33, _x34) {
        return _ref16.apply(this, arguments);
      }

      return updateProfile;
    }()

    /**
     * @description Send an email with a link the user can use verify their email address.
     * @param {string} [address] - Which address of the user's to send the email to.
     * This address must be in the user's emails list.
     * Defaults to the first unverified email in the list.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'sendVerificationEmail',
    value: function () {
      var _ref17 = _asyncToGenerator(regeneratorRuntime.mark(function _callee16(address) {
        var user, email, emails, token, resetPasswordMail;
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.db.findUserByEmail(address);

              case 2:
                user = _context16.sent;

                if (user) {
                  _context16.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { email: address });

              case 5:
                // If no address provided find the first unverified email
                if (!address) {
                  email = (0, _lodash.find)(user.emails, function (e) {
                    return !e.verified;
                  });

                  address = email && email.address; // eslint-disable-line no-param-reassign
                }
                // Make sure the address is valid
                emails = user.emails || [];

                if (!(!address || !(0, _lodash.includes)(emails.map(function (email) {
                  return email.address;
                }), address))) {
                  _context16.next = 9;
                  break;
                }

                throw new _common.AccountsError('No such email address for user');

              case 9:
                token = (0, _tokens.generateRandomToken)();
                _context16.next = 12;
                return this.db.addEmailVerificationToken(user.id, address, token);

              case 12:
                resetPasswordMail = this._prepareMail(address, token, this._sanitizeUser(user), 'verify-email', this.emailTemplates.verifyEmail, this.emailTemplates.from);
                _context16.next = 15;
                return this.email.sendMail(resetPasswordMail);

              case 15:
              case 'end':
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function sendVerificationEmail(_x35) {
        return _ref17.apply(this, arguments);
      }

      return sendVerificationEmail;
    }()

    /**
     * @description Send an email with a link the user can use to reset their password.
     * @param {string} [address] - Which address of the user's to send the email to.
     * This address must be in the user's emails list.
     * Defaults to the first email in the list.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'sendResetPasswordEmail',
    value: function () {
      var _ref18 = _asyncToGenerator(regeneratorRuntime.mark(function _callee17(address) {
        var user, token, resetPasswordMail;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _context17.next = 2;
                return this.db.findUserByEmail(address);

              case 2:
                user = _context17.sent;

                if (user) {
                  _context17.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { email: address });

              case 5:
                address = this._getFirstUserEmail(user, address); // eslint-disable-line no-param-reassign
                token = (0, _tokens.generateRandomToken)();
                _context17.next = 9;
                return this.db.addResetPasswordToken(user.id, address, token);

              case 9:
                resetPasswordMail = this._prepareMail(address, token, this._sanitizeUser(user), 'reset-password', this.emailTemplates.resetPassword, this.emailTemplates.from);
                _context17.next = 12;
                return this.email.sendMail(resetPasswordMail);

              case 12:
              case 'end':
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function sendResetPasswordEmail(_x36) {
        return _ref18.apply(this, arguments);
      }

      return sendResetPasswordEmail;
    }()

    /**
     * @description Send an email with a link the user can use to set their initial password.
     * @param {string} [address] - Which address of the user's to send the email to.
     * This address must be in the user's emails list.
     * Defaults to the first email in the list.
     * @returns {Promise<void>} - Return a Promise.
     */

  }, {
    key: 'sendEnrollmentEmail',
    value: function () {
      var _ref19 = _asyncToGenerator(regeneratorRuntime.mark(function _callee18(address) {
        var user, token, enrollmentMail;
        return regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this.db.findUserByEmail(address);

              case 2:
                user = _context18.sent;

                if (user) {
                  _context18.next = 5;
                  break;
                }

                throw new _common.AccountsError('User not found', { email: address });

              case 5:
                address = this._getFirstUserEmail(user, address); // eslint-disable-line no-param-reassign
                token = (0, _tokens.generateRandomToken)();
                _context18.next = 9;
                return this.db.addResetPasswordToken(user.id, address, token, 'enroll');

              case 9:
                enrollmentMail = this._prepareMail(address, token, this._sanitizeUser(user), 'enroll-account', this.emailTemplates.enrollAccount, this.emailTemplates.from);
                _context18.next = 12;
                return this.email.sendMail(enrollmentMail);

              case 12:
              case 'end':
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function sendEnrollmentEmail(_x37) {
        return _ref19.apply(this, arguments);
      }

      return sendEnrollmentEmail;
    }()
  }, {
    key: '_internalUserSanitizer',
    value: function _internalUserSanitizer(user) {
      return (0, _lodash.omit)(user, ['services']);
    }
  }, {
    key: '_sanitizeUser',
    value: function _sanitizeUser(user) {
      var _options3 = this.options(),
          userObjectSanitizer = _options3.userObjectSanitizer;

      return userObjectSanitizer(this._internalUserSanitizer(user), _lodash.omit, _lodash.pick);
    }
  }, {
    key: '_prepareMail',
    value: function _prepareMail() {
      if (this._options.prepareMail) {
        var _options4;

        return (_options4 = this._options).prepareMail.apply(_options4, arguments);
      }
      return this._defaultPrepareEmail.apply(this, arguments);
    }

    // eslint-disable-next-line max-len

  }, {
    key: '_defaultPrepareEmail',
    value: function _defaultPrepareEmail(to, token, user, pathFragment, emailTemplate, from) {
      var tokenizedUrl = this._defaultCreateTokenizedUrl(pathFragment, token);
      return {
        from: emailTemplate.from || from,
        to: to,
        subject: emailTemplate.subject(user),
        text: emailTemplate.text(user, tokenizedUrl)
      };
    }
  }, {
    key: '_defaultCreateTokenizedUrl',
    value: function _defaultCreateTokenizedUrl(pathFragment, token) {
      var siteUrl = this._options.siteUrl || _config3.default.siteUrl;
      return siteUrl + '/' + pathFragment + '/' + token;
    }
  }, {
    key: '_getFirstUserEmail',
    value: function _getFirstUserEmail(user, address) {
      // Pick the first email if we weren't passed an email
      if (!address && user.emails && user.emails[0]) {
        address = user.emails[0].address; // eslint-disable-line no-param-reassign
      }
      // Make sure the address is valid
      var emails = user.emails || [];
      if (!address || !(0, _lodash.includes)(emails.map(function (email) {
        return email.address;
      }), address)) {
        throw new _common.AccountsError('No such email address for user');
      }
      return address;
    }
  }, {
    key: '_hashAndBcryptPassword',
    value: function () {
      var _ref20 = _asyncToGenerator(regeneratorRuntime.mark(function _callee19(password) {
        var hashAlgorithm, hashedPassword;
        return regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                hashAlgorithm = this._options.passwordHashAlgorithm;
                hashedPassword = hashAlgorithm ? (0, _encryption.hashPassword)(password, hashAlgorithm) : password;
                return _context19.abrupt('return', (0, _encryption.bcryptPassword)(hashedPassword));

              case 3:
              case 'end':
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function _hashAndBcryptPassword(_x38) {
        return _ref20.apply(this, arguments);
      }

      return _hashAndBcryptPassword;
    }()
  }]);

  return AccountsServer;
}();

exports.default = new AccountsServer();