'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _emailjs = require('emailjs');

var _emailjs2 = _interopRequireDefault(_emailjs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Email = function () {
  function Email(emailConfig) {
    _classCallCheck(this, Email);

    if (emailConfig) {
      this.server = _emailjs2.default.server.connect(emailConfig);
    }
  }

  _createClass(Email, [{
    key: 'sendMail',
    value: function sendMail(mail) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        // eslint-disable-line flowtype/require-parameter-type
        // If no configuration for email just warn the user
        if (!_this.server) {
          console.log('No configuration for email, you must set an email configuration');
          resolve();
          return;
        }
        _this.server.send(mail, function (err, message) {
          if (err) return reject(err);
          return resolve(message);
        });
      });
    }
  }]);

  return Email;
}();

exports.default = Email;