{"version":3,"sources":["meteor://ðŸ’»app/packages/pauli:linkedin-oauth/linkedin-server.js"],"names":["Linkedin","getImage","profilePicture","image","undefined","element","elements","identifier","identifiers","push","displayImage","identifiersUrl","getEmails","accessToken","url","encodeURI","response","HTTP","get","data","emails","emailAddress","isJSON","str","JSON","parse","e","getTokenResponse","query","config","ServiceConfiguration","configurations","findOne","service","ConfigError","responseContent","post","params","grant_type","client_id","clientId","client_secret","OAuth","openSecret","secret","code","redirect_uri","_redirectUri","content","err","Error","message","parsedResponse","access_token","expiresIn","expires_in","getIdentity","registerService","identity","id","firstName","lastName","serviceData","expiresAt","Date","fields","linkedinId","length","primaryEmail","email","_","extend","options","profile","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/pauli_linkedin-oauth.js","sourcesContent":["Linkedin = {}\n\nconst getImage = profilePicture => {\n  const image = []\n  if (profilePicture !== undefined){\n    for (const element of profilePicture['displayImage~'].elements) {\n      for (const identifier of element.identifiers) {\n        image.push(identifier.identifier)\n      }\n    }\n  }\n  return {\n    displayImage: profilePicture ? profilePicture.displayImage : null,\n    identifiersUrl: image\n  }\n}\n\n// Request for email, returns array\nconst getEmails = function(accessToken) {\n  const url = encodeURI(\n    `https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))&oauth2_access_token=${accessToken}`,\n  )\n  const response = HTTP.get(url).data\n  const emails = []\n  for (const element of response.elements) {\n    emails.push(element['handle~'].emailAddress)\n  }\n  return emails\n}\n\n// checks whether a string parses as JSON\nconst isJSON = function(str) {\n  try {\n    JSON.parse(str)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\nconst getTokenResponse = function(query) {\n  const config = ServiceConfiguration.configurations.findOne(\n    { service: 'linkedin' },\n  )\n  if (!config)\n    throw new ServiceConfiguration.ConfigError(\n      'Service not configured',\n    )\n\n  let responseContent\n  try {\n    // Request an access token\n    responseContent = HTTP.post(\n      'https://api.linkedin.com/uas/oauth2/accessToken',\n      {\n        params: {\n          grant_type: 'authorization_code',\n          client_id: config.clientId,\n          client_secret: OAuth.openSecret(config.secret),\n          code: query.code,\n          redirect_uri: OAuth._redirectUri(\n            'linkedin',\n            config,\n          ),\n        },\n      },\n    ).content\n  } catch (err) {\n    throw new Error(\n      `Failed to complete OAuth handshake with Linkedin. ${\n        err.message\n      }`,\n    )\n  }\n\n  // If 'responseContent' does not parse as JSON, it is an error.\n  if (!isJSON(responseContent)) {\n    throw new Error(\n      `Failed to complete OAuth handshake with Linkedin. ${responseContent}`,\n    )\n  }\n\n  // Success! Extract access token and expiration\n  const parsedResponse = JSON.parse(responseContent)\n  const accessToken = parsedResponse.access_token\n  const expiresIn = parsedResponse.expires_in\n\n  if (!accessToken) {\n    throw new Error(\n      'Failed to complete OAuth handshake with Linkedin ' +\n        `-- can't find access token in HTTP response. ${responseContent}`,\n    )\n  }\n\n  return {\n    accessToken,\n    expiresIn,\n  }\n}\n\n// Request available fields from r_liteprofile\nconst getIdentity = function(accessToken) {\n  try {\n    const url = encodeURI(\n      `https://api.linkedin.com/v2/me?projection=(id,firstName,lastName,profilePicture(displayImage~:playableStreams))&oauth2_access_token=${accessToken}`,\n    )\n    return HTTP.get(url).data\n  } catch (err) {\n    throw new Error(\n      `Failed to fetch identity from Linkedin. ${\n        err.message\n      }`,\n    )\n  }\n}\n\nOAuth.registerService('linkedin', 2, null, query => {\n  const response = getTokenResponse(query)\n  const accessToken = response.accessToken\n  const identity = getIdentity(accessToken)\n\n  const {\n    id,\n    firstName,\n    lastName,\n    profilePicture,\n  } = identity\n\n  if (!id) {\n    throw new Error('Linkedin did not provide an id')\n  }\n  const serviceData = {\n    id,\n    accessToken,\n    expiresAt: +new Date() + 1000 * response.expiresIn,\n  }\n\n  const emails = getEmails(accessToken)\n\n  const fields = {\n    linkedinId: id,\n    firstName,\n    lastName,\n    profilePicture: getImage(profilePicture),\n    emails,\n  }\n\n  if (emails.length) {\n    const primaryEmail = emails[0]\n    fields.emailAddress = primaryEmail // for backward compatibility with previous versions of this package\n    fields.email = primaryEmail\n  }\n\n  _.extend(serviceData, fields)\n\n  return {\n    serviceData,\n    options: {\n      profile: fields,\n    },\n  }\n})\n\nLinkedin.retrieveCredential = function(\n  credentialToken,\n  credentialSecret,\n) {\n  return OAuth.retrieveCredential(\n    credentialToken,\n    credentialSecret,\n  )\n}\n"]}