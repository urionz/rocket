{"version":3,"sources":["meteor://ðŸ’»app/packages/meteor-developer-oauth/meteor_developer_common.js","meteor://ðŸ’»app/packages/meteor-developer-oauth/meteor_developer_server.js"],"names":["MeteorDeveloperAccounts","_server","_config","options","developerAccountsServer","OAuth","registerService","query","response","getTokens","accessToken","identity","getIdentity","serviceData","sealSecret","expiresAt","Date","expiresIn","Object","assign","refreshToken","profile","name","username","config","ServiceConfiguration","configurations","findOne","service","ConfigError","HTTP","post","params","grant_type","code","client_id","clientId","client_secret","openSecret","secret","redirect_uri","_redirectUri","err","Error","message","data","error","access_token","refresh_token","expires_in","get","headers","Authorization","retrieveCredential","credentialToken","credentialSecret"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,uBAAuB,GAAG,EAA1B;AAEAA,uBAAuB,CAACC,OAAxB,GAAkC,wBAAlC,C,CAEA;AACA;;AACAD,uBAAuB,CAACE,OAAxB,GAAkCC,OAAO,IAAI;AAC3C,MAAIA,OAAO,CAACC,uBAAZ,EAAqC;AACnCJ,2BAAuB,CAACC,OAAxB,GAAkCE,OAAO,CAACC,uBAA1C;AACD;AACF,CAJD,C;;;;;;;;;;;ACNAC,KAAK,CAACC,eAAN,CAAsB,kBAAtB,EAA0C,CAA1C,EAA6C,IAA7C,EAAmDC,KAAK,IAAI;AAC1D,QAAMC,QAAQ,GAAGC,SAAS,CAACF,KAAD,CAA1B;AACA,QAAM;AAAEG;AAAF,MAAkBF,QAAxB;AACA,QAAMG,QAAQ,GAAGC,WAAW,CAACF,WAAD,CAA5B;AAEA,QAAMG,WAAW,GAAG;AAClBH,eAAW,EAAEL,KAAK,CAACS,UAAN,CAAiBJ,WAAjB,CADK;AAElBK,aAAS,EAAG,CAAC,IAAIC,IAAJ,EAAF,GAAe,OAAOR,QAAQ,CAACS;AAFxB,GAApB;AAKAC,QAAM,CAACC,MAAP,CAAcN,WAAd,EAA2BF,QAA3B,EAV0D,CAY1D;AACA;AACA;;AACA,MAAIH,QAAQ,CAACY,YAAb,EACEP,WAAW,CAACO,YAAZ,GAA2Bf,KAAK,CAACS,UAAN,CAAiBN,QAAQ,CAACY,YAA1B,CAA3B;AAEF,SAAO;AACLP,eADK;AAELV,WAAO,EAAE;AAACkB,aAAO,EAAE;AAACC,YAAI,EAAET,WAAW,CAACU;AAAnB;AAAV,KAFJ,CAGL;;AAHK,GAAP;AAKD,CAvBD,E,CAyBA;AACA;AACA;AACA;AACA;;AACA,MAAMd,SAAS,GAAGF,KAAK,IAAI;AACzB,QAAMiB,MAAM,GAAGC,oBAAoB,CAACC,cAArB,CAAoCC,OAApC,CAA4C;AACzDC,WAAO,EAAE;AADgD,GAA5C,CAAf;AAGA,MAAI,CAACJ,MAAL,EACE,MAAM,IAAIC,oBAAoB,CAACI,WAAzB,EAAN;AAEF,MAAIrB,QAAJ;;AACA,MAAI;AACFA,YAAQ,GAAGsB,IAAI,CAACC,IAAL,CACT/B,uBAAuB,CAACC,OAAxB,GAAkC,eADzB,EAC0C;AACjD+B,YAAM,EAAE;AACNC,kBAAU,EAAE,oBADN;AAENC,YAAI,EAAE3B,KAAK,CAAC2B,IAFN;AAGNC,iBAAS,EAAEX,MAAM,CAACY,QAHZ;AAINC,qBAAa,EAAEhC,KAAK,CAACiC,UAAN,CAAiBd,MAAM,CAACe,MAAxB,CAJT;AAKNC,oBAAY,EAAEnC,KAAK,CAACoC,YAAN,CAAmB,kBAAnB,EAAuCjB,MAAvC;AALR;AADyC,KAD1C,CAAX;AAWD,GAZD,CAYE,OAAOkB,GAAP,EAAY;AACZ,UAAMxB,MAAM,CAACC,MAAP,CACJ,IAAIwB,KAAJ,CACE,wEACID,GAAG,CAACE,OAFV,CADI,EAKJ;AAACpC,cAAQ,EAAEkC,GAAG,CAAClC;AAAf,KALI,CAAN;AAOD;;AAED,MAAI,CAAEA,QAAQ,CAACqC,IAAX,IAAmBrC,QAAQ,CAACqC,IAAT,CAAcC,KAArC,EAA4C;AAC1C;AACA,UAAM,IAAIH,KAAJ,CACJ,yEACGnC,QAAQ,CAACqC,IAAT,GAAgBrC,QAAQ,CAACqC,IAAT,CAAcC,KAA9B,GACA,kBAFH,CADI,CAAN;AAKD,GAPD,MAOO;AACL,WAAO;AACLpC,iBAAW,EAAEF,QAAQ,CAACqC,IAAT,CAAcE,YADtB;AAEL3B,kBAAY,EAAEZ,QAAQ,CAACqC,IAAT,CAAcG,aAFvB;AAGL/B,eAAS,EAAET,QAAQ,CAACqC,IAAT,CAAcI;AAHpB,KAAP;AAKD;AACF,CA5CD;;AA8CA,MAAMrC,WAAW,GAAGF,WAAW,IAAI;AACjC,MAAI;AACF,WAAOoB,IAAI,CAACoB,GAAL,WACFlD,uBAAuB,CAACC,OADtB,uBAEL;AACEkD,aAAO,EAAE;AAAEC,qBAAa,mBAAY1C,WAAZ;AAAf;AADX,KAFK,EAKLmC,IALF;AAMD,GAPD,CAOE,OAAOH,GAAP,EAAY;AACZ,UAAMxB,MAAM,CAACC,MAAP,CACJ,IAAIwB,KAAJ,CAAU,8DACAD,GAAG,CAACE,OADd,CADI,EAGJ;AAACpC,cAAQ,EAAEkC,GAAG,CAAClC;AAAf,KAHI,CAAN;AAKD;AACF,CAfD;;AAiBAR,uBAAuB,CAACqD,kBAAxB,GACE,CAACC,eAAD,EAAkBC,gBAAlB,KACElD,KAAK,CAACgD,kBAAN,CAAyBC,eAAzB,EAA0CC,gBAA1C,CAFJ,C","file":"/packages/meteor-developer-oauth.js","sourcesContent":["MeteorDeveloperAccounts = {};\n\nMeteorDeveloperAccounts._server = \"https://www.meteor.com\";\n\n// Options are:\n//  - developerAccountsServer: defaults to \"https://www.meteor.com\"\nMeteorDeveloperAccounts._config = options => {\n  if (options.developerAccountsServer) {\n    MeteorDeveloperAccounts._server = options.developerAccountsServer;\n  }\n};\n","OAuth.registerService(\"meteor-developer\", 2, null, query => {\n  const response = getTokens(query);\n  const { accessToken } = response;\n  const identity = getIdentity(accessToken);\n\n  const serviceData = {\n    accessToken: OAuth.sealSecret(accessToken),\n    expiresAt: (+new Date) + (1000 * response.expiresIn)\n  };\n\n  Object.assign(serviceData, identity);\n\n  // only set the token in serviceData if it's there. this ensures\n  // that we don't lose old ones (since we only get this on the first\n  // log in attempt)\n  if (response.refreshToken)\n    serviceData.refreshToken = OAuth.sealSecret(response.refreshToken);\n\n  return {\n    serviceData,\n    options: {profile: {name: serviceData.username}}\n    // XXX use username for name until meteor accounts has a profile with a name\n  };\n});\n\n// returns an object containing:\n// - accessToken\n// - expiresIn: lifetime of token in seconds\n// - refreshToken, if this is the first authorization request and we got a\n//   refresh token from the server\nconst getTokens = query => {\n  const config = ServiceConfiguration.configurations.findOne({\n    service: 'meteor-developer'\n  });\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  let response;\n  try {\n    response = HTTP.post(\n      MeteorDeveloperAccounts._server + \"/oauth2/token\", {\n        params: {\n          grant_type: \"authorization_code\",\n          code: query.code,\n          client_id: config.clientId,\n          client_secret: OAuth.openSecret(config.secret),\n          redirect_uri: OAuth._redirectUri('meteor-developer', config)\n        }\n      }\n    );\n  } catch (err) {\n    throw Object.assign(\n      new Error(\n        \"Failed to complete OAuth handshake with Meteor developer accounts. \"\n          + err.message\n      ),\n      {response: err.response}\n    );\n  }\n\n  if (! response.data || response.data.error) {\n    // if the http response was a json object with an error attribute\n    throw new Error(\n      \"Failed to complete OAuth handshake with Meteor developer accounts. \" +\n        (response.data ? response.data.error :\n         \"No response data\")\n    );\n  } else {\n    return {\n      accessToken: response.data.access_token,\n      refreshToken: response.data.refresh_token,\n      expiresIn: response.data.expires_in\n    };\n  }\n};\n\nconst getIdentity = accessToken => {\n  try {\n    return HTTP.get(\n      `${MeteorDeveloperAccounts._server}/api/v1/identity`,\n      {\n        headers: { Authorization: `Bearer ${accessToken}`}\n      }\n    ).data;\n  } catch (err) {\n    throw Object.assign(\n      new Error(\"Failed to fetch identity from Meteor developer accounts. \" +\n                err.message),\n      {response: err.response}\n    );\n  }\n};\n\nMeteorDeveloperAccounts.retrieveCredential = \n  (credentialToken, credentialSecret) => \n    OAuth.retrieveCredential(credentialToken, credentialSecret);\n"]}