{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-gridfs/ufs-gridfs.js"],"names":["module","export","GridFSStore","_","link","v","check","Meteor","UploadFS","Store","constructor","options","extend","chunkSize","collectionName","TypeError","isServer","mongo","Package","MongoInternals","NpmModule","db","defaultRemoteCollectionDriver","mongoStore","GridFSBucket","bucketName","chunkSizeBytes","delete","fileId","callback","err","console","error","getReadStream","file","openDownloadStream","start","end","getWriteStream","writeStream","openUploadStreamWithId","contentType","type","on","emit","store","GridFS"],"mappings":"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","file":"/packages/jalik_ufs-gridfs.js","sourcesContent":["/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2017 Karl STEIN\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\nimport {_} from \"meteor/underscore\";\r\nimport {check} from \"meteor/check\";\r\nimport {Meteor} from \"meteor/meteor\";\r\nimport {UploadFS} from \"meteor/jalik:ufs\";\r\n\r\n\r\n/**\r\n * GridFS store\r\n * @param options\r\n * @constructor\r\n */\r\nexport class GridFSStore extends UploadFS.Store {\r\n\r\n    constructor(options) {\r\n        // Default options\r\n        options = _.extend({\r\n            chunkSize: 1024 * 255,\r\n            collectionName: 'uploadfs'\r\n        }, options);\r\n\r\n        // Check options\r\n        if (typeof options.chunkSize !== \"number\") {\r\n            throw new TypeError(\"GridFSStore: chunkSize is not a number\");\r\n        }\r\n        if (typeof options.collectionName !== \"string\") {\r\n            throw new TypeError(\"GridFSStore: collectionName is not a string\");\r\n        }\r\n\r\n        super(options);\r\n\r\n        this.chunkSize = options.chunkSize;\r\n        this.collectionName = options.collectionName;\r\n\r\n        if (Meteor.isServer) {\r\n            let mongo = Package.mongo.MongoInternals.NpmModule;\r\n            let db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\r\n            let mongoStore = new mongo.GridFSBucket(db, {\r\n                bucketName: options.collectionName,\r\n                chunkSizeBytes: options.chunkSize\r\n            });\r\n\r\n            /**\r\n             * Removes the file\r\n             * @param fileId\r\n             * @param callback\r\n             */\r\n            this.delete = function (fileId, callback) {\r\n                if (typeof callback !== 'function') {\r\n                    callback = function (err) {\r\n                        if (err) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                }\r\n                return mongoStore.delete(fileId, callback);\r\n            };\r\n\r\n            /**\r\n             * Returns the file read stream\r\n             * @param fileId\r\n             * @param file\r\n             * @param options\r\n             * @return {*}\r\n             */\r\n            this.getReadStream = function (fileId, file, options) {\r\n                options = _.extend({}, options);\r\n                return mongoStore.openDownloadStream(fileId, {\r\n                    start: options.start,\r\n                    end: options.end\r\n                });\r\n            };\r\n\r\n            /**\r\n             * Returns the file write stream\r\n             * @param fileId\r\n             * @param file\r\n             * @param options\r\n             * @return {*}\r\n             */\r\n            this.getWriteStream = function (fileId, file, options) {\r\n                let writeStream = mongoStore.openUploadStreamWithId(fileId, fileId, {\r\n                    chunkSizeBytes: this.chunkSize,\r\n                    contentType: file.type\r\n                });\r\n                writeStream.on('close', function () {\r\n                    writeStream.emit('finish');\r\n                });\r\n                return writeStream;\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n// Add store to UFS namespace\r\nUploadFS.store.GridFS = GridFSStore;\r\n"]}