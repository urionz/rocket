{"version":3,"sources":["meteor://ðŸ’»app/packages/github-oauth/github_server.js"],"names":["Github","OAuth","registerService","query","accessToken","getAccessToken","identity","getIdentity","emails","getEmails","primaryEmail","find","email","primary","serviceData","id","sealSecret","username","login","options","profile","name","userAgent","Meteor","release","config","ServiceConfiguration","configurations","findOne","service","ConfigError","response","HTTP","post","headers","Accept","params","code","client_id","clientId","client_secret","openSecret","secret","redirect_uri","_redirectUri","state","err","Object","assign","Error","message","data","error","access_token","get","retrieveCredential","credentialToken","credentialSecret"],"mappings":"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","file":"/packages/github-oauth.js","sourcesContent":["Github = {};\n\nOAuth.registerService('github', 2, null, query => {\n\n  const accessToken = getAccessToken(query);\n  const identity = getIdentity(accessToken);\n  const emails = getEmails(accessToken);\n  const primaryEmail = emails.find(email => email.primary);\n\n  return {\n    serviceData: {\n      id: identity.id,\n      accessToken: OAuth.sealSecret(accessToken),\n      email: identity.email || (primaryEmail && primaryEmail.email) || '',\n      username: identity.login,\n      emails,\n    },\n    options: {profile: {name: identity.name}}\n  };\n});\n\n// http://developer.github.com/v3/#user-agent-required\nlet userAgent = \"Meteor\";\nif (Meteor.release)\n  userAgent += `/${Meteor.release}`;\n\nconst getAccessToken = query => {\n  const config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config)\n    throw new ServiceConfiguration.ConfigError();\n\n  let response;\n  try {\n    response = HTTP.post(\n      \"https://github.com/login/oauth/access_token\", {\n        headers: {\n          Accept: 'application/json',\n          \"User-Agent\": userAgent\n        },\n        params: {\n          code: query.code,\n          client_id: config.clientId,\n          client_secret: OAuth.openSecret(config.secret),\n          redirect_uri: OAuth._redirectUri('github', config),\n          state: query.state\n        }\n      });\n  } catch (err) {\n    throw Object.assign(\n      new Error(`Failed to complete OAuth handshake with Github. ${err.message}`),\n      { response: err.response },\n    );\n  }\n  if (response.data.error) { // if the http response was a json object with an error attribute\n    throw new Error(`Failed to complete OAuth handshake with GitHub. ${response.data.error}`);\n  } else {\n    return response.data.access_token;\n  }\n};\n\nconst getIdentity = accessToken => {\n  try {\n    return HTTP.get(\n      \"https://api.github.com/user\", {\n        headers: {\"User-Agent\": userAgent}, // http://developer.github.com/v3/#user-agent-required\n        params: {access_token: accessToken}\n      }).data;\n  } catch (err) {\n    throw Object.assign(\n      new Error(`Failed to fetch identity from Github. ${err.message}`),\n      { response: err.response },\n    );\n  }\n};\n\nconst getEmails = accessToken => {\n  try {\n    return HTTP.get(\n      \"https://api.github.com/user/emails\", {\n        headers: {\"User-Agent\": userAgent}, // http://developer.github.com/v3/#user-agent-required\n        params: {access_token: accessToken}\n      }).data;\n  } catch (err) {\n    return [];\n  }\n};\n\nGithub.retrieveCredential = (credentialToken, credentialSecret) =>\n  OAuth.retrieveCredential(credentialToken, credentialSecret);\n"]}